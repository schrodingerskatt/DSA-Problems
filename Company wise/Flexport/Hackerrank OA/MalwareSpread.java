// Problem Link : https://leetcode.com/problems/minimize-malware-spread/

import java.util.*;

class UnionFind{
    private int[] parent;
    private int[] rank;

    public UnionFind(int n){
        parent = new int[n];
        rank = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
    }

    public int find(int x){
        return parent[x] == x ? x : (parent[x] = find(parent[x]));
    }

    public void union(int x, int y){
        int rootX = find(x);
        int rootY = find(y);
        
        if(rootX == rootY){
            return;
        }
        if(rank[rootX] < rank[rootY]){
            parent[rootX] = rootY;
            rank[rootY]+= rank[rootX];
        }
        else{
            parent[rootY] = rootX;
            rank[rootX]+= rank[rootY];
        }
    }
}


public class MalwareSpread {

    public int main() {
        int[][] graph = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        int[] initial = {0, 2};
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        int [] ufSize = new int[n];
        int [] malwareCount = new int[n];

        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                if(graph[i][j] == 1){
                    uf.union(i,j);
                }
            }
        }
        for(int i = 0; i < n; i++){
            ++ufSize[uf.find(i)];
        }
        for(int i: initial){
            ++malwareCount[uf.find(i)];
        }
        Arrays.sort(initial);
        int ans = initial[0];
        int maxufSize = 0;
        for(int infected: initial){
            int id = uf.find(infected);
            if(ufSize[id] > maxufSize && malwareCount[id] == 1){
                maxufSize = ufSize[id];
                ans = infected;
            }
        }
    return ans;
        
    }
    
}
